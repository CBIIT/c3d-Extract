PROMPT Creating Package 'CDUS_UTIL_PKG'
CREATE OR REPLACE PACKAGE CDUS_UTIL_PKG

  IS

-- Sub-Program Unit Declarations
  TYPE CT_CURTYPE IS REF CURSOR;

FUNCTION F_TRIAL_COMMENT_TEXT
 (P_EXT_OWNER            IN VARCHAR2
 ,P_CDUS_TX_ASSIG_CD     IN VARCHAR2
 ,P_PT_SUBGRP            IN VARCHAR2
 ,P_COMMENT_TYPE         IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TRIAL_COMMENT_TEXT, WNDS, WNPS);

FUNCTION F_TRIAL_COMMENT_ALL
 (P_EXT_OWNER            IN VARCHAR2
 ,P_CDUS_TX_ASSIG_CD     IN VARCHAR2
 ,P_PT_SUBGRP            IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TRIAL_COMMENT_ALL, WNDS, WNPS);

END;
/
SHOW ERROR

PROMPT Creating Package Body 'CDUS_UTIL_PKG'
CREATE OR REPLACE PACKAGE BODY CDUS_UTIL_PKG 

  IS

-- PL/SQL Private Declaration

FUNCTION F_TRIAL_COMMENT_TEXT
 (P_EXT_OWNER            IN VARCHAR2
 ,P_CDUS_TX_ASSIG_CD     IN VARCHAR2
 ,P_PT_SUBGRP            IN VARCHAR2
 ,P_COMMENT_TYPE         IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_COUNT        NUMBER := 0;
  T_TC_TEXT      VARCHAR2(4000) := NULL;
  T_SQL_STR      VARCHAR2(2000) := NULL;
  T_COMMENT      VARCHAR2(512) := NULL;
  T_CT_CUR      CT_CURTYPE;
  I             NUMBER := 0;
BEGIN

  IF ( (P_EXT_OWNER IS NULL) OR (P_CDUS_TX_ASSIG_CD IS NULL) OR
       (P_PT_SUBGRP IS NULL) OR (P_COMMENT_TYPE IS NULL) ) THEN
    RETURN ('');
  END IF;

  IF P_COMMENT_TYPE = 'AE' THEN
      T_SQL_STR :=
        'SELECT E.PATIENT_FUL||'||''': '''||'||C.NOTE AE_COMM '||
          'FROM PP_EXT_OWNER.CTS_COMMENTS_CM_VW C, '||
               'PP_EXT_OWNER.CTS_ENROLLMENT_VW E '||
         'WHERE C.PT = E.PT '||
           'AND C.QUALIFYING_VALUE =''TX'' '||
           'AND E.CDUS_TX_ASSIG_CD_FUL =''PP_CDUS_TX_ASSIG_CD_FUL'' '||
           'AND E.PT_SUBGRP_FUL =''PP_PT_SUBGRP_FUL'' '||
           'ORDER BY E.PATIENT_FUL ';
  ELSIF P_COMMENT_TYPE = 'RESP' THEN
      T_SQL_STR :=
        'SELECT E.PATIENT_FUL||'||'''/'''||'||C.CPEVENT||'||''': '''||'||C.NOTE RESPONSE_COMM '||
          'FROM PP_EXT_OWNER.CTS_COMMENTS_CM_VW C, '||
               'PP_EXT_OWNER.CTS_ENROLLMENT_VW E, '||
               'PP_EXT_OWNER.CTS_CINI_VW A '||
         'WHERE C.PT = E.PT '||
           'AND E.PT = A.PT '||
           'AND A.CPEVENT = C.CPEVENT '||
           'AND C.QUALIFYING_VALUE =''CA'' '||
           'AND E.CDUS_TX_ASSIG_CD_FUL =''PP_CDUS_TX_ASSIG_CD_FUL'' '||
           'AND E.PT_SUBGRP_FUL =''PP_PT_SUBGRP_FUL'' '||
           'ORDER BY E.PATIENT_FUL ';
  ELSE
      RETURN ('');
  END IF;

    T_SQL_STR := REPLACE(T_SQL_STR, 'PP_EXT_OWNER', P_EXT_OWNER);
    T_SQL_STR := REPLACE(T_SQL_STR, 'PP_CDUS_TX_ASSIG_CD_FUL', P_CDUS_TX_ASSIG_CD);
    T_SQL_STR := REPLACE(T_SQL_STR, 'PP_PT_SUBGRP_FUL', P_PT_SUBGRP);

    OPEN T_CT_CUR FOR T_SQL_STR;
    LOOP
      I := I + 1;
      FETCH T_CT_CUR INTO T_COMMENT;
      EXIT WHEN T_CT_CUR%NOTFOUND;

      IF I = 1 THEN
--        T_TC_TEXT := '"'||TRIM(T_COMMENT);
        T_TC_TEXT := TRIM(T_COMMENT);
      ELSE
        T_TC_TEXT := T_TC_TEXT||'; '||TRIM(T_COMMENT);
      END IF;
    END LOOP;

--    IF T_TC_TEXT IS NOT NULL THEN
--      T_TC_TEXT := T_TC_TEXT||'"';
--    END IF;

    CLOSE T_CT_CUR;

    RETURN(T_TC_TEXT);
EXCEPTION
    WHEN OTHERS THEN
      IF T_CT_CUR%ISOPEN THEN
          CLOSE T_CT_CUR;
      END IF;
      RAISE;
END;

FUNCTION F_TRIAL_COMMENT_ALL
 (P_EXT_OWNER            IN VARCHAR2
 ,P_CDUS_TX_ASSIG_CD     IN VARCHAR2
 ,P_PT_SUBGRP            IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_COUNT        NUMBER := 0;
  T_TC_TEXT      VARCHAR2(4000) := NULL;
  T_TEXT         VARCHAR2(4000) := NULL;
BEGIN

  IF ( (P_EXT_OWNER IS NULL) OR (P_CDUS_TX_ASSIG_CD IS NULL) OR
       (P_PT_SUBGRP IS NULL)  ) THEN
    RETURN ('');
  END IF;

  T_TEXT := F_TRIAL_COMMENT_TEXT(P_EXT_OWNER, P_CDUS_TX_ASSIG_CD, P_PT_SUBGRP, 'AE');

  IF T_TEXT IS NOT NULL THEN
    T_TC_TEXT := T_TEXT;
  END IF;

  T_TEXT := NULL;
  T_TEXT := F_TRIAL_COMMENT_TEXT(P_EXT_OWNER, P_CDUS_TX_ASSIG_CD, P_PT_SUBGRP, 'RESP');

  IF T_TEXT IS NULL THEN
    NULL;
  ELSE
    IF T_TC_TEXT IS NULL THEN
      T_TC_TEXT := T_TEXT;
    ELSE
      T_TC_TEXT := '"'||T_TC_TEXT||'"'||', '||'"'||T_TEXT||'"';
    END IF;
  END IF;

  RETURN(T_TC_TEXT);

EXCEPTION
    WHEN OTHERS THEN
      RAISE;
END;

BEGIN
  NULL;
END;
/
SHOW ERROR
