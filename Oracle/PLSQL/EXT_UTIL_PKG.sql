PROMPT Creating Package 'EXT_UTIL_PKG'
CREATE OR REPLACE PACKAGE EXT_UTIL_PKG
/* Modification History:
   PRC 06/09/05: Special Literal Processing Removed
 */

  IS

-- Sub-Program Unit Declarations
  TYPE CT_CURTYPE IS REF CURSOR;

FUNCTION F_STUDY_ID
 (P_STUDY IN VARCHAR2
 )
 RETURN NUMBER;

FUNCTION F_FILE_EXIST
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2
 )
 RETURN NUMBER;
PRAGMA RESTRICT_REFERENCES (F_FILE_EXIST, WNDS, WNPS);

FUNCTION F_COURSE_NUM
 (P_STUDY IN VARCHAR2,
  P_EXT_OWNER IN VARCHAR2,
  P_PT IN VARCHAR2,
  P_START_DT IN VARCHAR2
 )
 RETURN VARCHAR2;

PRAGMA RESTRICT_REFERENCES (F_COURSE_NUM, WNDS, WNPS);

FUNCTION F_PH_TEXT
 (P_PROTOCOL    IN VARCHAR2
 ,P_PATIENT     IN VARCHAR2
 ,P_DEL_FLAG    IN VARCHAR2
 ,P_NOTE_DT     IN VARCHAR2
 ,P_FILE_ID     IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_PH_TEXT, WNDS, WNPS);

FUNCTION F_PH_TEXT_1
 (P_PROTOCOL    IN VARCHAR2
 ,P_PATIENT     IN VARCHAR2
 ,P_DEL_FLAG    IN VARCHAR2
 ,P_NOTE_DT     IN VARCHAR2
 ,P_FILE_ID     IN VARCHAR2
 ,P_TYP_CD      IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_PH_TEXT_1, WNDS, WNPS);

FUNCTION F_PH_TEXT_2
 (P_PROTOCOL    IN VARCHAR2
 ,P_PATIENT     IN VARCHAR2
 ,P_DEL_FLAG    IN VARCHAR2
 ,P_NOTE_DT     IN VARCHAR2
 ,P_FILE_ID     IN VARCHAR2
 ,P_TYP_CD      IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_PH_TEXT_2, WNDS, WNPS);

FUNCTION F_FORMAT_DATE
 (P_VAR_DATE IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_FORMAT_DATE, WNDS, WNPS);

FUNCTION F_FORMAT_TIME
 (P_VAR_TIME IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_FORMAT_TIME, WNDS, WNPS);

FUNCTION F_FORMAT_TIME6
 (P_VAR_TIME IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_FORMAT_TIME6, WNDS, WNPS);

FUNCTION F_TO_CHAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TO_CHAR, WNDS, WNPS);

FUNCTION F_TO_CHAR_CDUS
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TO_CHAR_CDUS, WNDS, WNPS);

FUNCTION F_TO_CHAR_POS_NEG
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TO_CHAR_POS_NEG, WNDS, WNPS);

FUNCTION F_TO_CHAR_COUNT
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TO_CHAR_COUNT, WNDS, WNPS);

FUNCTION F_DA_TO_CHAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_DA_TO_CHAR, WNDS, WNPS);

FUNCTION F_AGE_TO_CHAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_AGE_TO_CHAR, WNDS, WNPS);

FUNCTION F_TO_CHAR_BANDS
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_TO_CHAR_BANDS, WNDS, WNPS);

FUNCTION F_VAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER DEFAULT 0)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_VAR, WNDS, WNPS);

FUNCTION F_VAR_EC
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_VAR_EC, WNDS, WNPS);

FUNCTION F_VAR_OTH_UL_NA
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_VAR_OTH_UL_NA, WNDS, WNPS);

FUNCTION F_OTH_UL_VAL_STR
 (P_VAR IN VARCHAR2)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_OTH_UL_VAL_STR, WNDS, WNPS);

FUNCTION F_LAST_EXT_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN DATE;
PRAGMA RESTRICT_REFERENCES (F_LAST_EXT_DATE, WNDS, WNPS);

FUNCTION F_LAST_CUTOFF_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN DATE;
PRAGMA RESTRICT_REFERENCES (F_LAST_CUTOFF_DATE, WNDS, WNPS);

FUNCTION F_CURRENT_EXT_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN DATE;
PRAGMA RESTRICT_REFERENCES (F_CURRENT_EXT_DATE, WNDS, WNPS);

FUNCTION F_EXT_STATUS
 (P_STUDY IN VARCHAR2, P_FILE_ID  IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_EXT_STATUS, WNDS, WNPS);

FUNCTION F_EXT_START_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2
 )
 RETURN DATE;
PRAGMA RESTRICT_REFERENCES (F_EXT_START_DATE, WNDS, WNPS);

FUNCTION F_FORMAT_TIME_DIFF
 (P_TIME_DIFF IN NUMBER
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_FORMAT_TIME_DIFF, WNDS, WNPS);

FUNCTION F_APP_META_DATA
 (P_NAME IN VARCHAR2
 )
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_APP_META_DATA, WNDS, WNPS);

FUNCTION F_LAST_COURSE_START_DT
 (P_STUDY                       IN VARCHAR2
 ,P_PT                          IN VARCHAR2
 ,P_ONSET_DT                    IN VARCHAR2
 ,P_EXT_OWNER                   IN VARCHAR2
 ) RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_LAST_COURSE_START_DT, WNDS, WNPS);

FUNCTION F_EXT_MODE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN VARCHAR2;
PRAGMA RESTRICT_REFERENCES (F_EXT_MODE, WNDS, WNPS);

PROCEDURE P_CT_EXT_ERRORS
 (P_STUDY         IN VARCHAR2
 ,P_FILE_ID          IN VARCHAR2
 ,P_PROC_NAME        IN VARCHAR2
 ,P_STEP_NAME        IN VARCHAR2
 ,P_KEY_VALUE        IN VARCHAR2
 ,P_SQL_ERROR_CODE   IN VARCHAR2
 ,P_SQL_ERROR_DESC   IN VARCHAR2
 ,P_CT_ERROR_DESC   IN VARCHAR2
 ,P_DEBUG_MODE       IN VARCHAR2
 );

PROCEDURE P_CT_EXT_LOGS
 (P_STUDY         IN VARCHAR2
 ,P_FILE_ID                  IN VARCHAR2
 ,P_PROC_NAME                IN VARCHAR2
 ,P_LAST_EXT_DATE            IN DATE
 ,P_EXT_STATUS               IN VARCHAR2
 ,P_START_DATE               IN DATE
 ,P_END_DATE                 IN DATE
 ,P_RECORD_READ_NUM          IN NUMBER
 ,P_RECORD_INSERT_NUM        IN NUMBER
 ,P_RECORD_UPDATE_NUM        IN NUMBER
 ,P_RECORD_ERROR_NUM         IN NUMBER
 ,P_DEBUG_MODE               IN VARCHAR2
 );

PROCEDURE P_CLEAR_LOGS;

PROCEDURE P_ANALYZE_SCHEMA
 (P_SCHEMA IN VARCHAR2
 );

PROCEDURE P_RUN_SQL
 (P_SQL_STRING IN VARCHAR2
 );

PROCEDURE P_SLEEP
 (P_SECOND IN NUMBER := 60
 );

PROCEDURE P_DELETE_META_DATA
 (P_NAME IN VARCHAR2
 );

PROCEDURE P_SET_META_DATA
 (P_NAME IN VARCHAR2
 ,P_VALUE IN VARCHAR2
 );

END;
/

Show Error

PROMPT Creating Package Body 'EXT_UTIL_PKG'
CREATE OR REPLACE PACKAGE BODY EXT_UTIL_PKG


  IS

-- PL/SQL Private Declaration

CURSOR GC_LAST_EXT_DATE(P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2) IS
    SELECT LAST_EXT_DATE
      FROM CT_EXT_FILE_CTL
     WHERE FILE_ID = RTRIM(P_FILE_ID)
       AND OC_STUDY = P_STUDY
       AND ROWNUM = 1;

CURSOR GC_CURRENT_EXT_DATE(P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2) IS
    SELECT CURRENT_EXT_DATE
      FROM CT_EXT_FILE_CTL
     WHERE FILE_ID = RTRIM(P_FILE_ID)
       AND OC_STUDY = P_STUDY
       AND ROWNUM = 1;

CURSOR GC_PH_TEXT(P_PROTOCOL IN VARCHAR2, P_PATIENT IN VARCHAR2, P_DEL_FLAG IN VARCHAR2,
                  P_NOTE_DT IN VARCHAR2, P_FILE_ID IN VARCHAR2) IS
    SELECT LINE_TEXT
      FROM CT_EXT_DATA
     WHERE PROTOCOL = P_PROTOCOL
       AND PATIENT = P_PATIENT
       AND DEL_FLAG||' ' = P_DEL_FLAG||' '
       AND KEY1 = P_NOTE_DT
       AND KEY2 = P_FILE_ID
       AND SUBMISSION_FLAG = 1
    ORDER BY REC_SEQ;

CURSOR GC_PH_TEXT_1(P_PROTOCOL IN VARCHAR2, P_PATIENT IN VARCHAR2, P_DEL_FLAG IN VARCHAR2,
                  P_NOTE_DT IN VARCHAR2, P_FILE_ID IN VARCHAR2, P_TYP_CD IN VARCHAR2) IS
    SELECT LINE_TEXT
      FROM CT_EXT_DATA
     WHERE PROTOCOL = P_PROTOCOL
       AND PATIENT = P_PATIENT
       AND DEL_FLAG||' ' = P_DEL_FLAG||' '
       AND KEY1 = P_NOTE_DT
       AND KEY2 = P_FILE_ID
       AND KEY3 = P_TYP_CD
       AND SUBMISSION_FLAG = 1
    ORDER BY REC_SEQ;

CURSOR GC_PH_TEXT_2(P_PROTOCOL IN VARCHAR2, P_PATIENT IN VARCHAR2, P_DEL_FLAG IN VARCHAR2,
                  P_NOTE_DT IN VARCHAR2, P_FILE_ID IN VARCHAR2, P_TYP_CD IN VARCHAR2) IS
    SELECT LINE_TEXT
      FROM CT_EXT_DATA
     WHERE PROTOCOL = P_PROTOCOL
       AND PATIENT = P_PATIENT
       AND DEL_FLAG||' ' = P_DEL_FLAG||' '
       AND KEY1 = P_NOTE_DT
       AND KEY2 = P_FILE_ID
       AND KEY3 = P_TYP_CD
    ORDER BY REC_SEQ;

CURSOR GC_EXTRACT_MODE(P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2) IS
    SELECT EXTRACT_MODE
      FROM CT_EXT_FILE_CTL
     WHERE FILE_ID = RTRIM(P_FILE_ID)
       AND OC_STUDY = P_STUDY
       AND ROWNUM = 1;

-- Program Data
G_FATAL_ERR EXCEPTION;

-- Sub-Program Units
FUNCTION F_STUDY_ID
 (P_STUDY IN VARCHAR2
 )
 RETURN NUMBER
 IS
  T_STUDY_ID         NUMBER := NULL;
  T_EXT_OBJECT_OWNER VARCHAR2(30);
  T_CUR              CT_CURTYPE;
  T_SQL_STR          VARCHAR2(240) := NULL;
BEGIN
  SELECT EXT_OBJECT_OWNER INTO T_EXT_OBJECT_OWNER
    FROM CT_EXT_STUDY_CTL
   WHERE OC_STUDY = P_STUDY
     AND ROWNUM = 1;

  T_SQL_STR := 'SELECT TASK_ID FROM '||T_EXT_OBJECT_OWNER||
               '.CT_OCL_STUDIES WHERE STUDY = :P_STUDY AND ROWNUM = 1';

  OPEN T_CUR FOR T_SQL_STR USING P_STUDY;
  FETCH T_CUR INTO T_STUDY_ID;
  IF T_CUR%NOTFOUND THEN
    CLOSE T_CUR;
    RETURN (T_STUDY_ID);    -- Not exist
  ELSE
    CLOSE T_CUR;
    RETURN (T_STUDY_ID);
  END IF;
exception
  WHEN OTHERS THEN
    IF T_CUR%ISOPEN THEN
      CLOSE T_CUR;
    END IF;
    RAISE;    -- Failure
End;

FUNCTION F_FILE_EXIST
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2
 )
 RETURN NUMBER
 IS
  T_TEMP_NUM         NUMBER;
BEGIN
  SELECT 1 INTO T_TEMP_NUM
    FROM CT_EXT_DATA
   WHERE FILE_ID = P_FILE_ID
     AND PROTOCOL = P_STUDY
     AND ROWNUM = 1;

  RETURN (1);

exception
  WHEN NO_DATA_FOUND THEN
    RETURN (0);
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_COURSE_NUM
 (P_STUDY IN VARCHAR2,
  P_EXT_OWNER IN VARCHAR2,
  P_PT IN VARCHAR2,
  P_START_DT IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_COURSE_NUM    VARCHAR2(30);
  T_TEMP_DT       DATE;
  T_SQL_STR       VARCHAR2(2000);
  GC_COURSE_NUM   CT_CURTYPE;
BEGIN
  BEGIN
    T_TEMP_DT := TO_DATE(RPAD(P_START_DT, 8, '1'), 'RRRRMMDD');
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (LPAD(' ', 3, ' '));    -- Not valid date
  END;

  T_SQL_STR :=
    'SELECT COURS_NUM '||
      'FROM '||P_EXT_OWNER||'.'||'CTSC_CINI    '||
     'WHERE STUDY = :P_STUDY '||
       'AND PT = :P_PT '||
       'AND START_DT = (SELECT MAX(START_DT) '||
       '                    FROM '||P_EXT_OWNER||'.'||'CTSC_CINI    '||
       '                   WHERE STUDY = :P_STUDY '||
       '                     AND PT = :P_PT '||
       '                     AND START_DT <= RPAD(:P_START_DT, 8, ''0''))';

  OPEN GC_COURSE_NUM FOR T_SQL_STR USING P_STUDY, P_PT, P_STUDY, P_PT, P_START_DT;

  FETCH GC_COURSE_NUM INTO T_COURSE_NUM;
  IF GC_COURSE_NUM%NOTFOUND THEN
    CLOSE GC_COURSE_NUM;
    RETURN (LPAD(' ', 3, ' '));    -- Not exist
  ELSE
    CLOSE GC_COURSE_NUM;
    IF TRIM(T_COURSE_NUM) IS NULL THEN
      T_COURSE_NUM := ' ';
    ELSE
      T_COURSE_NUM := TRIM(T_COURSE_NUM);
    END IF;
    RETURN(LPAD(T_COURSE_NUM, 3, ' '));
  END IF;
exception
  WHEN OTHERS THEN
    IF GC_COURSE_NUM%ISOPEN THEN
      CLOSE GC_COURSE_NUM;
    END IF;
    RAISE;    -- Failure
End;

FUNCTION F_PH_TEXT
 (P_PROTOCOL    IN VARCHAR2
 ,P_PATIENT     IN VARCHAR2
 ,P_DEL_FLAG    IN VARCHAR2
 ,P_NOTE_DT     IN VARCHAR2
 ,P_FILE_ID     IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_COUNT     NUMBER := 0;
  T_PH_TEXT   VARCHAR2(2400);
  T_STR       VARCHAR2(2400);
BEGIN
  OPEN GC_PH_TEXT(P_PROTOCOL, P_PATIENT, P_DEL_FLAG, P_NOTE_DT, P_FILE_ID);
  LOOP
    T_STR := NULL;
    T_COUNT := T_COUNT + 1;
    FETCH GC_PH_TEXT INTO T_STR;
    EXIT WHEN GC_PH_TEXT%NOTFOUND;
    IF T_COUNT > 1 THEN
      T_STR := TRIM(SUBSTR(T_STR, 118));
      T_PH_TEXT := T_PH_TEXT||' '||T_STR;
    ELSE
      T_STR := TRIM(T_STR);
      T_PH_TEXT := T_STR;
    END IF;
  END LOOP;
  CLOSE GC_PH_TEXT;
  RETURN(T_PH_TEXT);
exception
  WHEN OTHERS THEN
    IF GC_PH_TEXT%ISOPEN THEN
      CLOSE GC_PH_TEXT;
    END IF;
    RETURN(NULL);    -- Failure
End;

FUNCTION F_PH_TEXT_1
 (P_PROTOCOL    IN VARCHAR2
 ,P_PATIENT     IN VARCHAR2
 ,P_DEL_FLAG    IN VARCHAR2
 ,P_NOTE_DT     IN VARCHAR2
 ,P_FILE_ID     IN VARCHAR2
 ,P_TYP_CD      IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_COUNT     NUMBER := 0;
  T_PH_TEXT   VARCHAR2(2400);
  T_STR       VARCHAR2(2400);
BEGIN
  OPEN GC_PH_TEXT_1(P_PROTOCOL, P_PATIENT, P_DEL_FLAG, P_NOTE_DT, P_FILE_ID, P_TYP_CD);
  LOOP
    T_STR := NULL;
    T_COUNT := T_COUNT + 1;
    FETCH GC_PH_TEXT_1 INTO T_STR;
    EXIT WHEN GC_PH_TEXT_1%NOTFOUND;
    IF T_COUNT > 1 THEN
      T_STR := TRIM(SUBSTR(T_STR, 118));
      T_PH_TEXT := T_PH_TEXT||' '||T_STR;
    ELSE
      T_STR := TRIM(T_STR);
      T_PH_TEXT := T_STR;
    END IF;
  END LOOP;
  CLOSE GC_PH_TEXT_1;
  RETURN(T_PH_TEXT);
exception
  WHEN OTHERS THEN
    IF GC_PH_TEXT_1%ISOPEN THEN
      CLOSE GC_PH_TEXT_1;
    END IF;
    RETURN(NULL);    -- Failure
End;

FUNCTION F_PH_TEXT_2
 (P_PROTOCOL    IN VARCHAR2
 ,P_PATIENT     IN VARCHAR2
 ,P_DEL_FLAG    IN VARCHAR2
 ,P_NOTE_DT     IN VARCHAR2
 ,P_FILE_ID     IN VARCHAR2
 ,P_TYP_CD      IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_COUNT     NUMBER := 0;
  T_PH_TEXT   VARCHAR2(2400);
  T_STR       VARCHAR2(2400);
BEGIN
  OPEN GC_PH_TEXT_2(P_PROTOCOL, P_PATIENT, P_DEL_FLAG, P_NOTE_DT, P_FILE_ID, P_TYP_CD);
  LOOP
    T_STR := NULL;
    T_COUNT := T_COUNT + 1;
    FETCH GC_PH_TEXT_2 INTO T_STR;
    EXIT WHEN GC_PH_TEXT_2%NOTFOUND;
    IF T_COUNT > 1 THEN
      T_STR := TRIM(SUBSTR(T_STR, 118));
--
-- 09/09/2004 - to eliminate the problem of including the deleted page
--
--      T_PH_TEXT := T_PH_TEXT||' '||T_STR;

      IF (NVL(INSTR(T_PH_TEXT, T_STR), 0) = 0) THEN
        T_PH_TEXT := T_PH_TEXT||' '||T_STR;
      END IF;
    ELSE
      T_STR := TRIM(T_STR);
      T_PH_TEXT := T_STR;
    END IF;
  END LOOP;
  CLOSE GC_PH_TEXT_2;
  RETURN(T_PH_TEXT);
exception
  WHEN OTHERS THEN
    IF GC_PH_TEXT_2%ISOPEN THEN
      CLOSE GC_PH_TEXT_2;
    END IF;
    RETURN(NULL);    -- Failure
End;

FUNCTION F_FORMAT_DATE
 (P_VAR_DATE IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_LENGTH   NUMBER;
  T_STR      VARCHAR2(30);
  T_VAR_DATE VARCHAR2(30);
  T_DD      VARCHAR2(30);
  T_MM      VARCHAR2(30);
  T_YYYY    VARCHAR2(30);
  T_TEMP    VARCHAR2(30);
  T_INSTR   NUMBER;
  T_TEMP_NUM  NUMBER;
BEGIN
  IF TRIM(P_VAR_DATE) IS NULL THEN
--    RETURN(RPAD(' ', 8, ' '));
    RETURN(RPAD('-2', 8, ' '));
  END IF;
  T_VAR_DATE := REPLACE(UPPER(P_VAR_DATE), '/', '-');
  --------------------------------------------
  IF T_VAR_DATE LIKE '%UNK%' OR T_VAR_DATE LIKE '%UNKNOWN%' THEN
    RETURN(RPAD('-4', 8, ' '));
  END IF;
  IF T_VAR_DATE LIKE '%ONGOING%' THEN
    RETURN(RPAD('-6', 8, ' '));
  END IF;
  BEGIN
    T_TEMP_NUM := TO_NUMBER(T_VAR_DATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN(RPAD('-3', 8, ' '));
  END;
  --------------------------------------------
  T_LENGTH := LENGTH(T_VAR_DATE);

  IF T_LENGTH > 8 THEN
    T_VAR_DATE := SUBSTR(T_VAR_DATE, 1, 8);
  ELSIF T_LENGTH < 8 THEN
    T_VAR_DATE := RPAD(T_VAR_DATE, 8, '0');
  ELSE
    NULL;
  END IF;

  IF T_VAR_DATE LIKE '%0000' THEN
    T_STR := TO_CHAR(TO_DATE(SUBSTR(T_VAR_DATE, 1, 4), 'RRRR'), 'RRRR')||'0000';
  ELSIF T_VAR_DATE LIKE '%00' THEN
    T_STR := TO_CHAR(TO_DATE(SUBSTR(T_VAR_DATE, 1, 6), 'RRRRMM'), 'RRRRMM')||'00';
  ELSE
    T_STR := TO_CHAR(TO_DATE(T_VAR_DATE, 'RRRRMMDD'), 'RRRRMMDD');
  END IF;

  RETURN(RPAD(T_STR, 8, ' '));
exception
  WHEN OTHERS THEN
    RETURN(RPAD('-3', 8, ' '));     -- Failure
End;

FUNCTION F_FORMAT_TIME
 (P_VAR_TIME IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_LENGTH   NUMBER := LENGTH(P_VAR_TIME);
  T_STR      VARCHAR2(30);
BEGIN
  IF TRIM(P_VAR_TIME) IS NULL THEN
--    RETURN (RPAD(' ', 4, ' '));
    RETURN (RPAD('-2', 4, ' '));
  END IF;
  T_LENGTH := LENGTH(P_VAR_TIME);
  IF T_LENGTH = 4 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24MI'),   'HH24MI');
  ELSIF T_LENGTH = 3 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME||'0', 'HH24MI'),   'HH24MI');
  ELSIF T_LENGTH = 2 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24'),     'HH24')||'00';
  ELSIF T_LENGTH = 1 THEN
    T_STR := TO_CHAR(TO_DATE(LPAD(P_VAR_TIME, 2, '0'), 'HH24'),     'HH24')||'00';
  ELSE
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24MISS'), 'HH24MISS');
  END IF;
  RETURN(RPAD(T_STR, 4, ' '));
exception
  WHEN OTHERS THEN
    RETURN(RPAD('-3', 4, ' '));   -- Failure
End;

FUNCTION F_FORMAT_TIME6
 (P_VAR_TIME IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_LENGTH   NUMBER := LENGTH(P_VAR_TIME);
  T_STR      VARCHAR2(30);
BEGIN
  IF TRIM(P_VAR_TIME) IS NULL THEN
--    RETURN (RPAD(' ', 6, ' '));
    RETURN (RPAD('-2', 6, ' '));
  END IF;
  T_LENGTH := LENGTH(P_VAR_TIME);
  IF T_LENGTH = 6 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24MISS'), 'HH24MISS');
  ELSIF T_LENGTH = 5 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME||'0', 'HH24MISS'),   'HH24MISS');
  ELSIF T_LENGTH = 4 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24MI'),   'HH24MI');
  ELSIF T_LENGTH = 3 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME||'0', 'HH24MI'),   'HH24MI');
  ELSIF T_LENGTH = 2 THEN
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24'),     'HH24')||'00';
  ELSIF T_LENGTH = 1 THEN
    T_STR := TO_CHAR(TO_DATE(LPAD(P_VAR_TIME, 2, '0'), 'HH24'),     'HH24')||'00';
  ELSE
    T_STR := TO_CHAR(TO_DATE(P_VAR_TIME, 'HH24MISS'), 'HH24MISS');
  END IF;
  RETURN(RPAD(T_STR, 6, ' '));
exception
  WHEN OTHERS THEN
    RETURN(RPAD('-3', 6, ' '));   -- Failure
End;

FUNCTION F_LAST_EXT_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN DATE
 IS
  T_DATE DATE;
BEGIN

  OPEN GC_LAST_EXT_DATE(P_STUDY, P_FILE_ID);
  FETCH GC_LAST_EXT_DATE INTO T_DATE;
  IF GC_LAST_EXT_DATE%NOTFOUND THEN
    CLOSE GC_LAST_EXT_DATE;
    RAISE G_FATAL_ERR;
  ELSE
    CLOSE GC_LAST_EXT_DATE;
    RETURN(T_DATE);
  END IF;
exception
  WHEN OTHERS THEN
    IF GC_LAST_EXT_DATE%ISOPEN THEN
      CLOSE GC_LAST_EXT_DATE;
    END IF;
    RAISE;    -- Failure
End;

FUNCTION F_LAST_CUTOFF_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN DATE
 IS
  T_DATE DATE;
BEGIN
  IF F_EXT_MODE(P_STUDY, P_FILE_ID) = 'FULL' THEN
    T_DATE := TO_DATE('19000101', 'YYYYMMDD');
  ELSE
    T_DATE := F_LAST_EXT_DATE(P_STUDY, P_FILE_ID);
  END IF;

  RETURN (T_DATE);

exception
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_CURRENT_EXT_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN DATE
 IS
  T_DATE DATE;
BEGIN
  OPEN GC_CURRENT_EXT_DATE(P_STUDY, P_FILE_ID);
  FETCH GC_CURRENT_EXT_DATE INTO T_DATE;
  IF GC_CURRENT_EXT_DATE%NOTFOUND THEN
    CLOSE GC_CURRENT_EXT_DATE;
    RAISE G_FATAL_ERR;
  ELSE
    CLOSE GC_CURRENT_EXT_DATE;
    RETURN(T_DATE);
  END IF;
exception
  WHEN OTHERS THEN
    IF GC_CURRENT_EXT_DATE%ISOPEN THEN
      CLOSE GC_CURRENT_EXT_DATE;
    END IF;
    RAISE;    -- Failure
End;

FUNCTION F_TO_CHAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_NUMBER    NUMBER := 0;
  T_VAR       VARCHAR2(30);
  T_INSTR_DEC NUMBER := 0;
  T_LENGTH    NUMBER := 0;
  T_INSTR_PT  NUMBER := 0;
BEGIN
  IF UPPER(P_VAR) = 'UNKNOWN' THEN
    RETURN (LPAD('-4', NVL(P_LENGTH, 0), ' '));
  END IF;

  IF TRIM(P_VAR) IS NOT NULL THEN
    T_NUMBER := ROUND(TO_NUMBER(P_VAR), NVL(P_DEC, 0));
  --------------------
    IF NVL(LENGTH(T_NUMBER), 0) > NVL(P_LENGTH, 0) THEN
      RETURN (LPAD('-8', NVL(P_LENGTH, 0), ' '));
    END IF;

    IF NVL(P_DEC, 0) <> 0 THEN
      T_INSTR_PT := NVL(INSTR(P_VAR, '.'), 0);
      IF T_INSTR_PT <> 0 THEN
        IF NVL(LENGTH(TRIM(SUBSTR(P_VAR, 1, (T_INSTR_PT - 1)))), 0) > (NVL(P_LENGTH, 0) - NVL(P_DEC, 0) - 1) THEN
          RETURN (LPAD('-8', NVL(P_LENGTH, 0), ' '));
        END IF;

--        IF NVL(LENGTH(TRIM(SUBSTR(P_VAR, (T_INSTR_PT + 1)))), 0) > NVL(P_DEC, 0) THEN
--          RETURN (LPAD('-8', NVL(P_LENGTH, 0), ' '));
--        END IF;
      END IF;
    END IF;
  --------------------
    IF NVL(P_DEC, 0) <> 0 THEN
      T_VAR := TO_CHAR(ROUND(T_NUMBER, NVL(P_DEC, 0)));
      T_INSTR_DEC := INSTR(T_VAR, '.');
      IF NVL(T_INSTR_DEC, 0) <> 0 THEN
          T_VAR := SUBSTR(T_VAR, 1, NVL(T_INSTR_DEC, 0) -1)||'.'||
                 RPAD(SUBSTR(T_VAR, NVL(T_INSTR_DEC, 0) + 1) ,NVL(P_DEC, 0), '0');
      ELSE
        T_VAR := T_VAR||RPAD('.', NVL(P_DEC, 0) + 1, '0');
      END IF;
    ELSE
      T_VAR := T_NUMBER;
    END IF;
  ELSE
--    RETURN(RPAD(' ', NVL(P_LENGTH, 0), ' '));
    RETURN(LPAD('-2', NVL(P_LENGTH, 0), ' '));
  END IF;
  RETURN(LPAD(T_VAR, NVL(P_LENGTH, 0), ' '));
exception
  WHEN VALUE_ERROR THEN
    RETURN (LPAD('-8', NVL(P_LENGTH, 0), ' ')); -- PRC 08/27/03 : -8 Represents Bad Format
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_TO_CHAR_CDUS
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_NUMBER    NUMBER := 0;
  T_VAR       VARCHAR2(30);
  T_INSTR_DEC NUMBER := 0;
  T_LENGTH    NUMBER := 0;
  T_INSTR_PT  NUMBER := 0;
BEGIN
  IF UPPER(P_VAR) = 'UNKNOWN' THEN
    RETURN (LPAD('-4', NVL(P_LENGTH, 0), ' '));
  END IF;

  IF TRIM(P_VAR) IS NOT NULL THEN
    T_NUMBER := ROUND(TO_NUMBER(P_VAR), NVL(P_DEC, 0));
  --------------------
    IF NVL(LENGTH(T_NUMBER), 0) > NVL(P_LENGTH, 0) THEN
      RETURN (LPAD('-8', NVL(P_LENGTH, 0), ' '));
    END IF;

    IF NVL(P_DEC, 0) <> 0 THEN
      T_INSTR_PT := NVL(INSTR(P_VAR, '.'), 0);
      IF T_INSTR_PT <> 0 THEN
        IF NVL(LENGTH(TRIM(SUBSTR(P_VAR, 1, (T_INSTR_PT - 1)))), 0) > (NVL(P_LENGTH, 0) - NVL(P_DEC, 0) - 1) THEN
          RETURN (LPAD('-8', NVL(P_LENGTH, 0), ' '));
        END IF;

      END IF;
    END IF;
  --------------------
    IF NVL(P_DEC, 0) <> 0 THEN
      T_VAR := TO_CHAR(ROUND(T_NUMBER, NVL(P_DEC, 0)));
      T_INSTR_DEC := INSTR(T_VAR, '.');
      IF NVL(T_INSTR_DEC, 0) <> 0 THEN
          T_VAR := SUBSTR(T_VAR, 1, NVL(T_INSTR_DEC, 0) -1)||'.'||
                 RPAD(SUBSTR(T_VAR, NVL(T_INSTR_DEC, 0) + 1) ,NVL(P_DEC, 0), '0');
      ELSE
        T_VAR := T_VAR||RPAD('.', NVL(P_DEC, 0) + 1, '0');
      END IF;
    ELSE
      T_VAR := T_NUMBER;
    END IF;
  ELSE
    RETURN(NULL);
  END IF;
  RETURN(T_VAR);
exception
  WHEN VALUE_ERROR THEN
    RETURN (NULL);
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_TO_CHAR_POS_NEG
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_VAR       VARCHAR2(30);
BEGIN
  IF TRIM(UPPER(P_VAR)) IN ('NEGATIVE', '-', 'NEG', 'NEG.') THEN
      T_VAR := '0';
  ELSIF TRIM(UPPER(P_VAR)) IN ('POSITIVE', '+', 'POS', 'POS.') THEN
      T_VAR := '1';
  ELSE
      T_VAR := P_VAR;
  END IF;

  RETURN (F_TO_CHAR(T_VAR, P_LENGTH, P_DEC));

exception
  WHEN VALUE_ERROR THEN
    RETURN (LPAD('-3', NVL(P_LENGTH, 0), ' '));
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_TO_CHAR_COUNT
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_VAR       VARCHAR2(30);
BEGIN
  IF TRIM(UPPER(P_VAR)) IN ('NONE', 'NEG', 'NEG.', 'NEGATIVE') THEN
      T_VAR := '0';
  ELSIF TRIM(UPPER(P_VAR)) IN ('+', '1+','1-5','FEW','RARE','TRACE','SMALL') THEN
      T_VAR := '1';
  ELSIF TRIM(UPPER(P_VAR)) IN ('++', '2+','6-10','SEVERAL','MOD','MOD.','MODERATE') THEN
      T_VAR := '2';
  ELSIF TRIM(UPPER(P_VAR)) IN ('+++', '3+','11-20','MANY','LARGE') THEN
      T_VAR := '3';
  ELSIF TRIM(UPPER(P_VAR)) IN ('TOO NUMEROUS TO COUNT', '++++', '4+','21-40','LOADED') THEN
      T_VAR := '4';
  ELSE
      T_VAR := P_VAR;
  END IF;

  RETURN (F_TO_CHAR(T_VAR, P_LENGTH, P_DEC));

exception
  WHEN VALUE_ERROR THEN
    RETURN (LPAD('-3', NVL(P_LENGTH, 0), ' '));
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_DA_TO_CHAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_NUMBER    NUMBER := 0;
  T_VAR       VARCHAR2(30);
  T_INSTR_DEC NUMBER := 0;
  T_LENGTH    NUMBER := 0;
BEGIN
  IF UPPER(P_VAR) LIKE '%X%' OR UPPER(P_VAR) LIKE '%E%' THEN
    T_NUMBER := TO_NUMBER(REPLACE(REPLACE(UPPER(P_VAR), 'E', '9'), 'X', '9'));
    RETURN(LPAD(P_VAR, NVL(P_LENGTH, 0), ' '));
  ELSE
    RETURN(F_TO_CHAR(P_VAR, P_LENGTH, P_DEC));
  END IF;
exception
  WHEN VALUE_ERROR THEN
    RETURN (LPAD('-3', NVL(P_LENGTH, 0), ' '));
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_AGE_TO_CHAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_NUMBER    NUMBER := 0;
  T_VAR       VARCHAR2(30);
  T_INSTR_DEC NUMBER := 0;
  T_LENGTH    NUMBER := 0;
BEGIN
  IF TO_NUMBER(P_VAR) >= 5 THEN
    RETURN(LPAD(TRUNC(P_VAR), NVL(P_LENGTH, 0), ' '));
  ELSE
    RETURN(F_TO_CHAR(P_VAR, P_LENGTH, P_DEC));
  END IF;
exception
  WHEN VALUE_ERROR THEN
    RETURN (LPAD('-3', NVL(P_LENGTH, 0), ' '));
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_TO_CHAR_BANDS
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER
 ,P_DEC IN NUMBER)
 RETURN VARCHAR2
 IS
  T_NUMBER    NUMBER := 0;
  T_VAR       VARCHAR2(30);
  T_INSTR_DEC NUMBER := 0;
  T_LENGTH    NUMBER := 0;
BEGIN
  IF UPPER(TRIM(P_VAR)) = 'WITH POLYS' THEN
    RETURN (LPAD('-1', NVL(P_LENGTH, 0), ' '));
  ELSE
    RETURN(F_TO_CHAR(P_VAR, P_LENGTH, P_DEC));
  END IF;
exception
  WHEN VALUE_ERROR THEN
    RETURN (LPAD('-3', NVL(P_LENGTH, 0), ' '));
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;


/*  REWROTE THIS FUNCTION, See Below
FUNCTION F_VAR
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER)
 RETURN VARCHAR2
 IS
 T_LENGTH   NUMBER := 0;
BEGIN
  IF TRIM(P_VAR) IS NOT NULL THEN
    T_LENGTH := LENGTH(P_VAR);
    IF NVL(P_LENGTH, 0) > T_LENGTH THEN
      RETURN(RPAD(P_VAR, P_LENGTH, ' '));
    ELSE
      RETURN(SUBSTR(P_VAR, 1, P_LENGTH));
    END IF;
  ELSE
  RETURN(RPAD(' ', NVL(P_LENGTH, 0), ' '));
-- Special Literal Removed: PRC 06/09/05
-- RETURN(RPAD('*', NVL(P_LENGTH, 0), ' '));
--
  END IF;
exception
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;
*/

FUNCTION F_VAR (P_VAR    IN VARCHAR2,
                P_LENGTH IN NUMBER DEFAULT 0)
   RETURN VARCHAR2 IS
-- PRC 2/26/2009: Changed procedure.  Now More Efficient, removed unnecessary code
--                Added SPECIAL LITERAL that is set by P_EXTRACT during overall
--                process start.
BEGIN
   -- If the value is not null
   IF TRIM(P_VAR) IS NOT NULL THEN
      -- Right Pad the Value to Length p_length, if it is too large RPAD will trunc it
      RETURN( RPAD(P_VAR, P_LENGTH, ' ') );
   ELSE
      -- if value is null, return SPECIAL value based on study setting.
      RETURN(RPAD(EXT_DATA_PKG.G$SPECIAL_LITERAL, P_LENGTH, ' '));
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      RAISE;    -- Failure
End;

FUNCTION F_VAR_EC
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER)
 RETURN VARCHAR2
 IS
 T_VAR   VARCHAR2(2000) := P_VAR;
BEGIN
  IF TRIM(T_VAR) = 'N/A' THEN
    T_VAR := 'X';
  END IF;
  RETURN (F_VAR(T_VAR, P_LENGTH));
exception
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_VAR_OTH_UL_NA
 (P_VAR IN VARCHAR2
 ,P_LENGTH IN NUMBER)
 RETURN VARCHAR2
 IS
 T_VAR   VARCHAR2(2000) := P_VAR;
BEGIN
  IF TRIM(T_VAR) = 'NORMAL' THEN
    T_VAR := 'N';
  ELSIF TRIM(T_VAR) IN ('HIGH', 'LOW') THEN
    T_VAR := 'A';
  ELSE
    T_VAR := ' ';
  END IF;
  RETURN (F_VAR(T_VAR, P_LENGTH));
exception
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_OTH_UL_VAL_STR
 (P_VAR IN VARCHAR2)
 RETURN VARCHAR2
 IS
 T_VAL_STR     VARCHAR2(2000);
 T_NUM_VALUE   NUMBER := NULL;
 T_VALUE_TYPE  VARCHAR2(1) := NULL;
 T_LIT_VALUE   VARCHAR2(128) := NULL;
BEGIN
        BEGIN
          T_NUM_VALUE   := TO_NUMBER(P_VAR);
          T_LIT_VALUE   := RPAD(' ', 128, ' ');
          T_VALUE_TYPE  := 'N';
        EXCEPTION
          WHEN VALUE_ERROR THEN
            T_NUM_VALUE   := NULL;
            T_LIT_VALUE   := EXT_UTIL_PKG.F_VAR(P_VAR, 128);
            T_VALUE_TYPE  := 'L';
        END;
        T_VAL_STR :=
           T_VALUE_TYPE||
           EXT_UTIL_PKG.F_TO_CHAR(T_NUM_VALUE, 9, 3)||
           T_LIT_VALUE;

  RETURN (T_VAL_STR);
exception
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_EXT_STATUS
 (P_STUDY IN VARCHAR2, P_FILE_ID  IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_TEMP_VAR     VARCHAR2(30) ;
BEGIN

  SELECT EXT_STATUS INTO T_TEMP_VAR
    FROM CT_EXT_LOGS
   WHERE FILE_ID = P_FILE_ID
     AND STUDY = P_STUDY
     AND ROWNUM = 1;

  RETURN (T_TEMP_VAR);

exception
  WHEN NO_DATA_FOUND THEN
    RETURN (NULL);
  WHEN OTHERS THEN
    RAISE;    -- Failure
END;

FUNCTION F_EXT_START_DATE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2
 )
 RETURN DATE
 IS

  T_START_DATE          DATE;

BEGIN

  SELECT START_DATE INTO T_START_DATE
    FROM CT_EXT_LOGS
   WHERE FILE_ID = P_FILE_ID
     AND STUDY = P_STUDY
     AND ROWNUM = 1;

  RETURN (T_START_DATE);

exception
  WHEN NO_DATA_FOUND THEN
    RETURN (NULL);
  WHEN OTHERS THEN
    RAISE;    -- Failure
END;

FUNCTION F_FORMAT_TIME_DIFF
 (P_TIME_DIFF IN NUMBER
 )
 RETURN VARCHAR2
 IS
V_DAYS INTEGER;
V_HOURS INTEGER;
V_SECONDS INTEGER;
V_RETURN VARCHAR2(100);
V_MINUTES INTEGER;
begin

  v_return := '';

  v_days := floor(p_time_diff);
  v_hours := floor(mod(p_time_diff,1)*24);
  v_minutes := floor(mod((p_time_diff*24),1)*60);
  v_seconds := floor(mod((p_time_diff*1440),1)*60);

  if v_days > 0 then
    v_return := v_return||to_char(v_days)||' days ';
  end if;

  if v_hours > 0 then
    v_return := v_return||to_char(v_hours)||' hours ';
  end if;

  if v_minutes > 0 then
    v_return := v_return||to_char(v_minutes)||' mins ';
  end if;

  if v_seconds > 0 then
    v_return := v_return||to_char(v_seconds)||' secs';
  end if;

  return(v_return);

end;

FUNCTION F_APP_META_DATA
 (P_NAME IN VARCHAR2
 )
 RETURN VARCHAR2
 IS
  T_VALUE     CT_APP_META_DATA.VALUE%TYPE := NULL;
BEGIN
  SELECT VALUE INTO T_VALUE
    FROM CT_APP_META_DATA
   WHERE NAME = P_NAME
     AND ROWNUM = 1;

    RETURN(T_VALUE);
exception
  when no_data_found then
    return(NULL);
  WHEN OTHERS THEN
    RAISE;    -- Failure
End;

FUNCTION F_LAST_COURSE_START_DT
 (P_STUDY                       IN VARCHAR2
 ,P_PT                          IN VARCHAR2
 ,P_ONSET_DT                    IN VARCHAR2
 ,P_EXT_OWNER                   IN VARCHAR2
 ) RETURN VARCHAR2
 IS
  T_MOD_NAME           VARCHAR2(60)  := 'CT_EXT_DATA_PKG.P_INS_CRS_AE';
  T_STEP_NAME          VARCHAR2(30)   := '1';
  T_LAST_COURSE_START_DT   VARCHAR2(30) := NULL;
  T_CT_CUR1      CT_CURTYPE;
  T_GC_LAST_COURSE_START_DT         LONG;
BEGIN
  SELECT TEXT INTO T_GC_LAST_COURSE_START_DT
    FROM CT_EXT_CRS_CTL
   WHERE CRS_NAME = 'GC_LAST_COURSE_START_DT'
     AND FILE_ID = 'TX';

  T_GC_LAST_COURSE_START_DT := REPLACE(T_GC_LAST_COURSE_START_DT, 'PP_EXT_OWNER.', P_EXT_OWNER||'.');

    OPEN T_CT_CUR1 FOR T_GC_LAST_COURSE_START_DT USING P_STUDY, P_PT, P_ONSET_DT ;
    FETCH T_CT_CUR1 INTO T_LAST_COURSE_START_DT;
    IF T_CT_CUR1%NOTFOUND THEN
      CLOSE T_CT_CUR1;
      RETURN (NULL);
    ELSE
      CLOSE T_CT_CUR1;
      RETURN (T_LAST_COURSE_START_DT);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
      IF T_CT_CUR1%ISOPEN THEN
        CLOSE T_CT_CUR1;
      END IF;
      RAISE;
END;

FUNCTION F_EXT_MODE
 (P_STUDY IN VARCHAR2, P_FILE_ID IN VARCHAR2)
 RETURN VARCHAR2
 IS
  T_EXTRACT_MODE VARCHAR2(30);
BEGIN
  OPEN GC_EXTRACT_MODE(P_STUDY, P_FILE_ID);
  FETCH GC_EXTRACT_MODE INTO T_EXTRACT_MODE;
  IF GC_EXTRACT_MODE%NOTFOUND THEN
    T_EXTRACT_MODE := NULL;
  END IF;
  CLOSE GC_EXTRACT_MODE;
  RETURN(T_EXTRACT_MODE);
exception
  WHEN OTHERS THEN
    IF GC_EXTRACT_MODE%ISOPEN THEN
      CLOSE GC_EXTRACT_MODE;
    END IF;
    RAISE;    -- Failure
End;

PROCEDURE P_CT_EXT_ERRORS
 (P_STUDY         IN VARCHAR2
 ,P_FILE_ID          IN VARCHAR2
 ,P_PROC_NAME        IN VARCHAR2
 ,P_STEP_NAME        IN VARCHAR2
 ,P_KEY_VALUE        IN VARCHAR2
 ,P_SQL_ERROR_CODE   IN VARCHAR2
 ,P_SQL_ERROR_DESC   IN VARCHAR2
 ,P_CT_ERROR_DESC   IN VARCHAR2
 ,P_DEBUG_MODE       IN VARCHAR2
 )
 IS
  T_MOD_NAME           VARCHAR2(60)  := 'EXT_UTIL_PKG.P_CT_EXT_ERRORS';
  T_STEP_NAME          VARCHAR2(30)   := '1';
BEGIN
  ---- Insert one record into the error table
        INSERT INTO CT_EXT_ERRORS  (
                         ERR_ID
                        ,FILE_ID
                        ,PROC_NAME
                        ,STEP_NAME
                        ,KEY_VALUE
                        ,SQL_ERROR_CODE
                        ,SQL_ERROR_DESC
                        ,CT_ERROR_DESC
                        ,PROC_DATE
                        ,STUDY  )
               VALUES (
                         CT_EXT_ERROR_ID_SEQ.NEXTVAL
                        ,P_FILE_ID
                        ,P_PROC_NAME
                        ,P_STEP_NAME
                        ,P_KEY_VALUE
                        ,P_SQL_ERROR_CODE
                        ,P_SQL_ERROR_DESC
                        ,P_CT_ERROR_DESC
                        ,SYSDATE
                        ,P_STUDY );


        COMMIT;

  ---- Raise or continue depending on the value of parameter P_DEBUG_MODE
  IF P_DEBUG_MODE <> 'RAISE' THEN
     NULL;
  ELSE
     RAISE_APPLICATION_ERROR(-20000,'Error occured in '||T_MOD_NAME||
                '--'||T_STEP_NAME||'--'||P_SQL_ERROR_CODE||'--'||p_sql_error_desc);
  END IF;
EXCEPTION
  WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR(-20000,'Error occured in '||T_MOD_NAME||
                                    '-'||T_STEP_NAME||'----'||SQLERRM);
END;

PROCEDURE P_CT_EXT_LOGS
 (P_STUDY                 IN VARCHAR2
 ,P_FILE_ID                  IN VARCHAR2
 ,P_PROC_NAME                IN VARCHAR2
 ,P_LAST_EXT_DATE            IN DATE
 ,P_EXT_STATUS               IN VARCHAR2
 ,P_START_DATE               IN DATE
 ,P_END_DATE                 IN DATE
 ,P_RECORD_READ_NUM          IN NUMBER
 ,P_RECORD_INSERT_NUM        IN NUMBER
 ,P_RECORD_UPDATE_NUM        IN NUMBER
 ,P_RECORD_ERROR_NUM         IN NUMBER
 ,P_DEBUG_MODE               IN VARCHAR2
 )
 IS
T_MOD_NAME CONSTANT VARCHAR2(60) := 'P_CT_EXT_LOGS';
T_STEP_NAME VARCHAR2(30) := '1';
V_LOG_ID PLS_INTEGER;
BEGIN
  -- check if procedure log record exists for this procedure
  begin

    select log_id into v_log_id
      from ct_ext_logs
      where file_id = p_file_id
        AND PROC_NAME = P_PROC_NAME
        AND STUDY = P_STUDY;

  exception
    when no_data_found then
      v_log_id := null;
  end;

  if v_log_id is not null then

    -- remove procedure log record before inserting replacement record

    delete from ct_ext_logs
      where log_id = v_log_id
        AND PROC_NAME = P_PROC_NAME
        AND STUDY = P_STUDY;
  else
    -- get id for new log record

    select CT_EXT_LOG_ID_SEQ.NEXTVAL into v_log_id
      from dual;
  end if;

  ---- Insert log record into the error table DAM_LOAD_LOG_PROCEDURES

       INSERT INTO CT_EXT_LOGS  (
                        LOG_ID
                       ,FILE_ID
                       ,PROC_NAME
                       ,LAST_EXT_DATE
                       ,EXT_STATUS
                       ,START_DATE
                       ,END_DATE
                       ,RECORD_READ_NUM
                       ,RECORD_INSERT_NUM
                       ,RECORD_UPDATE_NUM
                       ,RECORD_ERROR_NUM
                       ,PROC_DATE
                       ,STUDY   )
               VALUES ( v_log_id
                       ,P_FILE_ID
                       ,P_PROC_NAME
                       ,P_LAST_EXT_DATE
                       ,P_EXT_STATUS
                       ,P_START_DATE
                       ,P_END_DATE
                       ,P_RECORD_READ_NUM
                       ,P_RECORD_INSERT_NUM
                       ,P_RECORD_UPDATE_NUM
                       ,P_RECORD_ERROR_NUM
                       ,SYSDATE
                       ,P_STUDY );

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR(-20000,'Error occured in '||T_MOD_NAME||
                                    '-'||T_STEP_NAME||'----'||SQLERRM);
END;

PROCEDURE P_CLEAR_LOGS
 IS
begin
  delete from ct_ext_logs;
  delete from ct_ext_errors;
  commit;
end;

PROCEDURE P_ANALYZE_SCHEMA
 (P_SCHEMA IN VARCHAR2
 )
 IS
  T_MOD_NAME           VARCHAR2(60)  := 'EXT_UTIL_PKG.P_ANALYZE SCHEMA';
  T_STEP_NAME          VARCHAR2(30)   := '1';
BEGIN
 DBMS_UTILITY.ANALYZE_SCHEMA(UPPER(P_SCHEMA), 'COMPUTE', NULL, NULL, NULL);
EXCEPTION
    WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20000,'Error occured in '||T_MOD_NAME||
                                    '-'||T_STEP_NAME||'----'||SQLERRM);
END;

PROCEDURE P_RUN_SQL
 (P_SQL_STRING IN VARCHAR2
 )
 IS
  CURSOR_HANDLE          INTEGER  := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL_FEEDBACK      INTEGER;
BEGIN
    DBMS_SQL.PARSE(CURSOR_HANDLE, P_SQL_STRING, DBMS_SQL.NATIVE);
    DBMS_SQL_FEEDBACK := DBMS_SQL.EXECUTE( CURSOR_HANDLE );
    DBMS_SQL.CLOSE_CURSOR (CURSOR_HANDLE);
EXCEPTION
  WHEN OTHERS THEN
    IF CURSOR_HANDLE IS NOT NULL THEN
        DBMS_SQL.CLOSE_CURSOR (CURSOR_HANDLE);
    END IF;
    RAISE;
END;

PROCEDURE P_SLEEP
 (P_SECOND IN NUMBER := 60
 )
 IS
  T_MOD_NAME           VARCHAR2(60)  := 'EXT_UTIL_PKG.P_SLEEP';
  T_STEP_NAME          VARCHAR2(30)   := '1';
BEGIN
  NULL;
-- DBMS_LOCK.SLEEP(P_SECOND);
EXCEPTION
    WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20000,'Error occured in '||T_MOD_NAME||
                                    '-'||T_STEP_NAME||'----'||SQLERRM);

END;

PROCEDURE P_DELETE_META_DATA
 (P_NAME IN VARCHAR2
 )
 IS
begin

  delete from ct_app_meta_data
    where name = p_name;

exception
  when no_data_found then
    null;
end;

PROCEDURE P_SET_META_DATA
 (P_NAME IN VARCHAR2
 ,P_VALUE IN VARCHAR2
 )
 IS
begin

  insert into ct_app_meta_data
    values(p_name,p_value);

exception
  when dup_val_on_index then

    update ct_app_meta_data
      set value = p_value
      where name = p_name;
end;

BEGIN
  NULL;
END;
/

SHOW ERROR
